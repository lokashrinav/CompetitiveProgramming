/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>     // For standard input and output operations
#include <vector>       // For using the vector container
#include <algorithm>    // For algorithms like sort, max, min, etc.
#include <cmath>        // For mathematical functions
#include <string>       // For string operations
#include <map>          // For the map container
#include <set>          // For the set container
#include <queue>        // For the queue, priority_queue containers
#include <stack>        // For the stack container
#include <deque>        // For the deque container
#include <cstdio>       // For printf and scanf
#include <cstring>      // For C-style string functions like memset, strcmp, etc.
#include <climits>      // For limits of integral types
#include <cassert>      // For the assert function
#include <numeric>
#include <limits.h>

// Using namespace std to avoid typing std:: before standard library names
using namespace std;

int main()
{
    freopen("measurement.in", "r", stdin);
    freopen("measurement.out", "w", stdout);
    
    int N; cin >> N;
    vector<pair<int, pair<string, int>>> v1;
    for(int i = 0; i < N; i++) {
        pair<int, pair<string, int>> p1;
        cin >> p1.first >> p1.second.first >> p1.second.second;
        v1.push_back(p1);
    }
    
    sort(v1.begin(), v1.end());
    
    int changeNum = 0;

    //vector<pair<string, int>> scores = {makepair("M", 7), makepair("E", 7), makepair("B", 7)};
    
    vector<int> scores = {7, 7, 7};
    vector<int> leaders;
    int leaderBoard = 3;
    
    

    for(const auto& v: v1) {
        vector<int> prevScores = scores;
        vector<int> prevLeaders = leaders;
        int prevBoard = leaderBoard;
        if(v.second.first == "Mildred") {
            scores[0] += v.second.second;
        }
        if(v.second.first == "Elsie") {
            scores[1] += v.second.second;
        }
        if(v.second.first == "Bessie") {
            scores[2] += v.second.second;
        }
        int max = *max_element(scores.begin(), scores.end());
        
        leaderBoard = 0;
        leaders.clear();
        for(int i = 0; i < 3; i++) {
            if(scores[i] == max) {
                leaderBoard += 1;
                leaders.push_back(i);
            }
        }
        if(leaders != prevLeaders) {
            changeNum += 1;
        }
    }
    
    cout << changeNum << endl;
    
    
}
