/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>     // For standard input and output operations
#include <vector>       // For using the vector container
#include <algorithm>    // For algorithms like sort, max, min, etc.
#include <cmath>        // For mathematical functions
#include <string>       // For string operations
#include <map>          // For the map container
#include <set>          // For the set container
#include <queue>        // For the queue, priority_queue containers
#include <stack>        // For the stack container
#include <deque>        // For the deque container
#include <cstdio>       // For printf and scanf
#include <cstring>      // For C-style string functions like memset, strcmp, etc.
#include <climits>      // For limits of integral types
#include <cassert>      // For the assert function
#include <numeric>

// Using namespace std to avoid typing std:: before standard library names
using namespace std;

int main()
{
    freopen("tttt.in", "r", stdin);
    freopen("tttt.out", "w", stdout);
    
    string s1, s2, s3; cin >> s1 >> s2 >> s3;
    
    set<char> singleWinners;
    
    set<vector<char>> s;
    
    set<char> dub;
    
    if(s1[0] == s1[1] && s1[1] == s1[2]) {
        singleWinners.insert(s1[0]);
    }
    else if(s1[0] == s1[1] || s1[1] == s1[2] || s1[0] == s1[2]) {
        dub.clear();
        dub.insert(s1[0]);
        dub.insert(s1[1]);
        dub.insert(s1[2]);
        vector<char> vec (dub.begin(), dub.end());
        sort(vec.begin(), vec.end());
        s.insert(vec);
    }
    
    if(s2[0] == s2[1] && s2[1] == s2[2]) {
        singleWinners.insert(s2[0]);
    }
    else if(s2[0] == s2[1] || s2[1] == s2[2] || s2[0] == s2[2]) {
        dub.clear();
        dub.insert(s2[0]);
        dub.insert(s2[1]);
        dub.insert(s2[2]);
        vector<char> vec (dub.begin(), dub.end());
        sort(vec.begin(), vec.end());
        s.insert(vec);
    }
    
    if(s3[0] == s3[1] && s3[1] == s3[2]) {
        singleWinners.insert(s3[0]);
    }
    else if(s3[0] == s3[1] || s3[1] == s3[2] || s3[0] == s3[2]) {
        dub.clear();
        dub.insert(s3[0]);
        dub.insert(s3[1]);
        dub.insert(s3[2]);
        vector<char> vec (dub.begin(), dub.end());
        sort(vec.begin(), vec.end());
        s.insert(vec);
    }
    
    if(s1[0] == s2[1] && s2[1] == s3[2]) {
        singleWinners.insert(s1[0]);
    }
    else if(s1[0] == s2[1] || s2[1] == s3[2] || s1[0] == s3[2]) {
        dub.clear();
        dub.insert(s1[0]);
        dub.insert(s2[1]);
        dub.insert(s3[2]);
        vector<char> vec (dub.begin(), dub.end());
        sort(vec.begin(), vec.end());
        s.insert(vec);
    }
    
    if(s1[2] == s2[1] && s2[1] == s3[0]) {
        singleWinners.insert(s1[2]);
    }
    else if(s1[2] == s2[1] || s2[1] == s3[0] || s1[2] == s3[0]) {
        dub.clear();
        dub.insert(s1[2]);
        dub.insert(s2[1]);
        dub.insert(s3[0]);
        vector<char> vec (dub.begin(), dub.end());
        sort(vec.begin(), vec.end());
        s.insert(vec);
    }
    
    if(s1[0] == s2[0] && s2[0] == s3[0]) {
        singleWinners.insert(s1[0]);
    }
    else if(s1[0] == s2[0] || s2[0] == s3[0] || s1[0] == s3[0]) {
        dub.clear();
        dub.insert(s1[0]);
        dub.insert(s2[0]);
        dub.insert(s3[0]);
        vector<char> vec (dub.begin(), dub.end());
        sort(vec.begin(), vec.end());
        s.insert(vec);
    }
    
    if(s1[1] == s2[1] && s2[1] == s3[1]) {
        singleWinners.insert(s1[1]);
    }
    else if(s1[1] == s2[1] || s2[1] == s3[1] || s1[1] == s3[1]) {
        dub.clear();
        dub.insert(s1[1]);
        dub.insert(s2[1]);
        dub.insert(s3[1]);
        vector<char> vec (dub.begin(), dub.end());
        sort(vec.begin(), vec.end());
        s.insert(vec);
    }
    
    if(s1[2] == s2[2] && s2[2] == s3[2]) {
        singleWinners.insert(s1[2]);
    }
    else if(s1[2] == s2[2] || s2[2] == s3[2] || s1[2] == s3[2]) {
        dub.clear();
        dub.insert(s1[2]);
        dub.insert(s2[2]);
        dub.insert(s3[2]);
        vector<char> vec (dub.begin(), dub.end());
        sort(vec.begin(), vec.end());
        s.insert(vec);
    }
    
    cout << singleWinners.size() << endl;
    
    cout << s.size() << endl;

    
}
